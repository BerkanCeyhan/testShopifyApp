import { manualMatchIds } from './id-manual-matching.js';
import { automaticMatchmaking } from './id-matching.js';
import { deployConfirmationPrompt, extensionMigrationPrompt, matchConfirmationPrompt } from './prompts.js';
import { createExtension } from '../dev/create-extension.js';
import { getUIExtensionsToMigrate, migrateExtensionsToUIExtension } from '../dev/migrate-to-ui-extension.js';
import { getFlowExtensionsToMigrate, migrateFlowExtensions } from '../dev/migrate-flow-extension.js';
import { err, ok } from '@shopify/cli-kit/node/result';
import { ensureAuthenticatedPartners } from '@shopify/cli-kit/node/session';
import { outputCompleted } from '@shopify/cli-kit/node/output';
import { useVersionedAppConfig } from '@shopify/cli-kit/node/context/local';
export async function ensureExtensionsIds(options, { extensionRegistrations: initialRemoteExtensions, configurationRegistrations, dashboardManagedExtensionRegistrations: dashboardOnlyExtensions, }) {
    let remoteExtensions = initialRemoteExtensions;
    const managedUuidExtensions = options.app.allExtensions.filter((ext) => ext.isUuidManaged());
    const validIdentifiers = options.envIdentifiers.extensions ?? {};
    let localExtensions = managedUuidExtensions.filter((ext) => !ext.isFunctionExtension);
    const functionExtensions = managedUuidExtensions.filter((ext) => ext.isFunctionExtension);
    localExtensions = localExtensions.concat(functionExtensions);
    const uiExtensionsToMigrate = getUIExtensionsToMigrate(localExtensions, remoteExtensions, validIdentifiers);
    const flowExtensionsToMigrate = getFlowExtensionsToMigrate(localExtensions, dashboardOnlyExtensions, validIdentifiers);
    if (uiExtensionsToMigrate.length > 0) {
        const confirmedMigration = await extensionMigrationPrompt(uiExtensionsToMigrate);
        if (!confirmedMigration)
            return err('user-cancelled');
        remoteExtensions = await migrateExtensionsToUIExtension(uiExtensionsToMigrate, options.appId, remoteExtensions);
    }
    if (flowExtensionsToMigrate.length > 0) {
        const confirmedMigration = await extensionMigrationPrompt(flowExtensionsToMigrate, false);
        if (!confirmedMigration)
            return err('user-cancelled');
        const newRemoteExtensions = await migrateFlowExtensions(flowExtensionsToMigrate, options.appId, dashboardOnlyExtensions);
        remoteExtensions = remoteExtensions.concat(newRemoteExtensions);
    }
    const matchExtensions = await automaticMatchmaking(localExtensions, remoteExtensions, validIdentifiers, 'uuid');
    let validMatches = matchExtensions.identifiers;
    const validMatchesById = {};
    const extensionsToCreate = matchExtensions.toCreate ?? [];
    for (const pending of matchExtensions.toConfirm) {
        // eslint-disable-next-line no-await-in-loop
        const confirmed = await matchConfirmationPrompt(pending.local, pending.remote);
        if (confirmed) {
            validMatches[pending.local.localIdentifier] = pending.remote.uuid;
        }
        else {
            extensionsToCreate.push(pending.local);
        }
    }
    let onlyRemoteExtensions = matchExtensions.toManualMatch.remote ?? [];
    if (matchExtensions.toManualMatch.local.length > 0) {
        const matchResult = await manualMatchIds(matchExtensions.toManualMatch, 'uuid');
        validMatches = { ...validMatches, ...matchResult.identifiers };
        extensionsToCreate.push(...matchResult.toCreate);
        onlyRemoteExtensions = matchResult.onlyRemote;
    }
    if (!options.force) {
        let question;
        if (options.release) {
            question = `Release a new version of ${options.partnersApp?.title}?`;
        }
        else {
            question = `Create a new version of ${options.partnersApp?.title}?`;
        }
        const confirmed = await deployConfirmationPrompt({
            summary: {
                appTitle: options.partnersApp?.title,
                question,
                identifiers: validMatches,
                toCreate: extensionsToCreate,
                dashboardOnly: dashboardOnlyExtensions,
            },
            release: options.release,
            apiKey: options.appId,
            token: options.token,
        });
        if (!confirmed)
            return err('user-cancelled');
    }
    const extensionsNonUuidManaged = await ensureNonUuidManagedExtensionsIds(configurationRegistrations, options.app.allExtensions.filter((ext) => !ext.isUuidManaged()), options.appId);
    if (extensionsToCreate.length > 0) {
        const newIdentifiers = await createExtensions(extensionsToCreate, options.appId);
        for (const [localIdentifier, registration] of Object.entries(newIdentifiers)) {
            validMatches[localIdentifier] = registration.uuid;
            validMatchesById[localIdentifier] = registration.id;
        }
    }
    // For extensions we also need the match by ID, not only UUID (doesn't apply to functions)
    for (const [localIdentifier, uuid] of Object.entries(validMatches)) {
        const registration = remoteExtensions.find((registration) => registration.uuid === uuid);
        if (registration)
            validMatchesById[localIdentifier] = registration.id;
    }
    return ok({
        extensions: validMatches,
        extensionIds: validMatchesById,
        extensionsNonUuidManaged,
    });
}
async function ensureNonUuidManagedExtensionsIds(remoteConfigurationRegistrations, localExtensionRegistrations, appId) {
    if (!useVersionedAppConfig())
        return {};
    const extensionsToCreate = [];
    const validMatches = {};
    localExtensionRegistrations.forEach((local) => {
        const possibleMatch = remoteConfigurationRegistrations.find((remote) => remote.type === local.graphQLType);
        if (possibleMatch)
            validMatches[local.localIdentifier] = possibleMatch.uuid;
        else
            extensionsToCreate.push(local);
    });
    if (extensionsToCreate.length > 0) {
        const newIdentifiers = await createExtensions(extensionsToCreate, appId, false);
        for (const [localIdentifier, registration] of Object.entries(newIdentifiers)) {
            validMatches[localIdentifier] = registration.uuid;
        }
    }
    return validMatches;
}
async function createExtensions(extensions, appId, output = true) {
    const token = await ensureAuthenticatedPartners();
    const result = {};
    for (const extension of extensions) {
        // Create one at a time to avoid API rate limiting issues.
        // eslint-disable-next-line no-await-in-loop
        const registration = await createExtension(appId, extension.graphQLType, extension.handle, token);
        if (output)
            outputCompleted(`Created extension ${extension.handle}.`);
        result[extension.localIdentifier] = registration;
    }
    return result;
}
//# sourceMappingURL=identifiers-extensions.js.map