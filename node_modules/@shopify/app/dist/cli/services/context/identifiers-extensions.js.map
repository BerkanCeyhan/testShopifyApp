{"version":3,"file":"identifiers-extensions.js","sourceRoot":"","sources":["../../../../src/cli/services/context/identifiers-extensions.ts"],"names":[],"mappings":"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","sourcesContent":["import {manualMatchIds} from './id-manual-matching.js'\nimport {automaticMatchmaking} from './id-matching.js'\nimport {EnsureDeploymentIdsPresenceOptions, LocalSource, MatchingError, RemoteSource} from './identifiers.js'\nimport {deployConfirmationPrompt, extensionMigrationPrompt, matchConfirmationPrompt} from './prompts.js'\nimport {createExtension} from '../dev/create-extension.js'\nimport {IdentifiersExtensions} from '../../models/app/identifiers.js'\nimport {getUIExtensionsToMigrate, migrateExtensionsToUIExtension} from '../dev/migrate-to-ui-extension.js'\nimport {getFlowExtensionsToMigrate, migrateFlowExtensions} from '../dev/migrate-flow-extension.js'\nimport {err, ok, Result} from '@shopify/cli-kit/node/result'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {outputCompleted} from '@shopify/cli-kit/node/output'\nimport {useVersionedAppConfig} from '@shopify/cli-kit/node/context/local'\n\ninterface AppWithExtensions {\n  extensionRegistrations: RemoteSource[]\n  dashboardManagedExtensionRegistrations: RemoteSource[]\n  configurationRegistrations: RemoteSource[]\n}\n\nexport async function ensureExtensionsIds(\n  options: EnsureDeploymentIdsPresenceOptions,\n  {\n    extensionRegistrations: initialRemoteExtensions,\n    configurationRegistrations,\n    dashboardManagedExtensionRegistrations: dashboardOnlyExtensions,\n  }: AppWithExtensions,\n): Promise<\n  Result<\n    {\n      extensions: IdentifiersExtensions\n      extensionIds: IdentifiersExtensions\n      extensionsNonUuidManaged: IdentifiersExtensions\n    },\n    MatchingError\n  >\n> {\n  let remoteExtensions = initialRemoteExtensions\n  const managedUuidExtensions = options.app.allExtensions.filter((ext) => ext.isUuidManaged())\n  const validIdentifiers = options.envIdentifiers.extensions ?? {}\n  let localExtensions = managedUuidExtensions.filter((ext) => !ext.isFunctionExtension)\n\n  const functionExtensions = managedUuidExtensions.filter((ext) => ext.isFunctionExtension)\n  localExtensions = localExtensions.concat(functionExtensions)\n\n  const uiExtensionsToMigrate = getUIExtensionsToMigrate(localExtensions, remoteExtensions, validIdentifiers)\n  const flowExtensionsToMigrate = getFlowExtensionsToMigrate(localExtensions, dashboardOnlyExtensions, validIdentifiers)\n\n  if (uiExtensionsToMigrate.length > 0) {\n    const confirmedMigration = await extensionMigrationPrompt(uiExtensionsToMigrate)\n    if (!confirmedMigration) return err('user-cancelled')\n    remoteExtensions = await migrateExtensionsToUIExtension(uiExtensionsToMigrate, options.appId, remoteExtensions)\n  }\n\n  if (flowExtensionsToMigrate.length > 0) {\n    const confirmedMigration = await extensionMigrationPrompt(flowExtensionsToMigrate, false)\n    if (!confirmedMigration) return err('user-cancelled')\n    const newRemoteExtensions = await migrateFlowExtensions(\n      flowExtensionsToMigrate,\n      options.appId,\n      dashboardOnlyExtensions,\n    )\n    remoteExtensions = remoteExtensions.concat(newRemoteExtensions)\n  }\n\n  const matchExtensions = await automaticMatchmaking(localExtensions, remoteExtensions, validIdentifiers, 'uuid')\n\n  let validMatches = matchExtensions.identifiers\n  const validMatchesById: {[key: string]: string} = {}\n\n  const extensionsToCreate = matchExtensions.toCreate ?? []\n\n  for (const pending of matchExtensions.toConfirm) {\n    // eslint-disable-next-line no-await-in-loop\n    const confirmed = await matchConfirmationPrompt(pending.local, pending.remote)\n    if (confirmed) {\n      validMatches[pending.local.localIdentifier] = pending.remote.uuid\n    } else {\n      extensionsToCreate.push(pending.local)\n    }\n  }\n\n  let onlyRemoteExtensions = matchExtensions.toManualMatch.remote ?? []\n\n  if (matchExtensions.toManualMatch.local.length > 0) {\n    const matchResult = await manualMatchIds(matchExtensions.toManualMatch, 'uuid')\n    validMatches = {...validMatches, ...matchResult.identifiers}\n    extensionsToCreate.push(...matchResult.toCreate)\n    onlyRemoteExtensions = matchResult.onlyRemote\n  }\n\n  if (!options.force) {\n    let question\n\n    if (options.release) {\n      question = `Release a new version of ${options.partnersApp?.title}?`\n    } else {\n      question = `Create a new version of ${options.partnersApp?.title}?`\n    }\n\n    const confirmed = await deployConfirmationPrompt({\n      summary: {\n        appTitle: options.partnersApp?.title,\n        question,\n        identifiers: validMatches,\n        toCreate: extensionsToCreate,\n        dashboardOnly: dashboardOnlyExtensions,\n      },\n      release: options.release,\n      apiKey: options.appId,\n      token: options.token,\n    })\n    if (!confirmed) return err('user-cancelled')\n  }\n\n  const extensionsNonUuidManaged = await ensureNonUuidManagedExtensionsIds(\n    configurationRegistrations,\n    options.app.allExtensions.filter((ext) => !ext.isUuidManaged()),\n    options.appId,\n  )\n\n  if (extensionsToCreate.length > 0) {\n    const newIdentifiers = await createExtensions(extensionsToCreate, options.appId)\n    for (const [localIdentifier, registration] of Object.entries(newIdentifiers)) {\n      validMatches[localIdentifier] = registration.uuid\n      validMatchesById[localIdentifier] = registration.id\n    }\n  }\n\n  // For extensions we also need the match by ID, not only UUID (doesn't apply to functions)\n  for (const [localIdentifier, uuid] of Object.entries(validMatches)) {\n    const registration = remoteExtensions.find((registration) => registration.uuid === uuid)\n    if (registration) validMatchesById[localIdentifier] = registration.id\n  }\n\n  return ok({\n    extensions: validMatches,\n    extensionIds: validMatchesById,\n    extensionsNonUuidManaged,\n  })\n}\n\nasync function ensureNonUuidManagedExtensionsIds(\n  remoteConfigurationRegistrations: RemoteSource[],\n  localExtensionRegistrations: LocalSource[],\n  appId: string,\n) {\n  if (!useVersionedAppConfig()) return {}\n\n  const extensionsToCreate: LocalSource[] = []\n  const validMatches: {[key: string]: string} = {}\n  localExtensionRegistrations.forEach((local) => {\n    const possibleMatch = remoteConfigurationRegistrations.find((remote) => remote.type === local.graphQLType)\n    if (possibleMatch) validMatches[local.localIdentifier] = possibleMatch.uuid\n    else extensionsToCreate.push(local)\n  })\n\n  if (extensionsToCreate.length > 0) {\n    const newIdentifiers = await createExtensions(extensionsToCreate, appId, false)\n    for (const [localIdentifier, registration] of Object.entries(newIdentifiers)) {\n      validMatches[localIdentifier] = registration.uuid\n    }\n  }\n\n  return validMatches\n}\n\nasync function createExtensions(extensions: LocalSource[], appId: string, output = true) {\n  const token = await ensureAuthenticatedPartners()\n  const result: {[localIdentifier: string]: RemoteSource} = {}\n  for (const extension of extensions) {\n    // Create one at a time to avoid API rate limiting issues.\n    // eslint-disable-next-line no-await-in-loop\n    const registration = await createExtension(appId, extension.graphQLType, extension.handle, token)\n    if (output) outputCompleted(`Created extension ${extension.handle}.`)\n    result[extension.localIdentifier] = registration\n  }\n  return result\n}\n"]}