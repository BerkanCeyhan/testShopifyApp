{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../../src/cli/services/deploy.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable require-atomic-updates */\nimport {uploadThemeExtensions, uploadExtensionsBundle, UploadExtensionsBundleOutput} from './deploy/upload.js'\n\nimport {ensureDeployContext} from './context.js'\nimport {bundleAndBuildExtensions} from './deploy/bundle.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {updateAppIdentifiers} from '../models/app/identifiers.js'\nimport {ExtensionInstance} from '../models/extensions/extension-instance.js'\nimport {renderInfo, renderSuccess, renderTasks} from '@shopify/cli-kit/node/ui'\nimport {inTemporaryDirectory, mkdir} from '@shopify/cli-kit/node/fs'\nimport {joinPath, dirname} from '@shopify/cli-kit/node/path'\nimport {outputNewline, outputInfo, formatPackageManagerCommand} from '@shopify/cli-kit/node/output'\nimport {useThemebundling, useVersionedAppConfig} from '@shopify/cli-kit/node/context/local'\nimport {getArrayRejectingUndefined} from '@shopify/cli-kit/common/array'\nimport {Config} from '@oclif/core'\nimport type {Task} from '@shopify/cli-kit/node/ui'\n\ninterface DeployOptions {\n  /** The app to be built and uploaded */\n  app: AppInterface\n\n  /** API key of the app in Partners admin */\n  apiKey?: string\n\n  /** If true, ignore any cached appId or extensionId */\n  reset: boolean\n\n  /** If true, proceed with deploy without asking for confirmation */\n  force: boolean\n\n  /** If true, deploy app without releasing it to the users */\n  noRelease: boolean\n\n  /** App version message */\n  message?: string\n\n  /** App version identifier */\n  version?: string\n\n  /** The git reference url of the app version */\n  commitReference?: string\n\n  /** The config from the Oclif command */\n  commandConfig: Config\n}\n\ninterface TasksContext {\n  bundlePath?: string\n  bundle?: boolean\n}\n\nexport async function deploy(options: DeployOptions) {\n  // eslint-disable-next-line prefer-const\n  let {app, identifiers, partnersApp, token, release} = await ensureDeployContext(options)\n  const apiKey = identifiers.app\n\n  outputNewline()\n  if (release) {\n    outputInfo(`Releasing a new app version as part of ${partnersApp.title}`)\n  } else {\n    outputInfo(`Creating a new app version as part of ${partnersApp.title}`)\n  }\n\n  outputNewline()\n\n  let uploadExtensionsBundleResult: UploadExtensionsBundleOutput\n\n  await inTemporaryDirectory(async (tmpDir) => {\n    try {\n      const bundle = app.allExtensions.some((ext) => ext.features.includes('bundling'))\n      let bundlePath: string | undefined\n\n      if (bundle) {\n        bundlePath = joinPath(tmpDir, `bundle.zip`)\n        await mkdir(dirname(bundlePath))\n      }\n      await bundleAndBuildExtensions({app, bundlePath, identifiers})\n\n      let uploadTaskTitle\n\n      if (release) {\n        uploadTaskTitle = 'Releasing an app version'\n      } else {\n        uploadTaskTitle = 'Creating an app version'\n      }\n\n      const tasks: Task<TasksContext>[] = [\n        {\n          title: 'Running validation',\n          task: async () => {\n            await app.preDeployValidation()\n          },\n        },\n        {\n          title: uploadTaskTitle,\n          task: async () => {\n            const filterConfigurationAppModules = (extension: ExtensionInstance) =>\n              useVersionedAppConfig() || !extension.isAppConfigExtension\n\n            const appModules = await Promise.all(\n              app.allExtensions\n                .filter(filterConfigurationAppModules)\n                .flatMap((ext) => ext.bundleConfig({identifiers, token, apiKey})),\n            )\n\n            uploadExtensionsBundleResult = await uploadExtensionsBundle({\n              apiKey,\n              bundlePath,\n              appModules: getArrayRejectingUndefined(appModules),\n              release,\n              token,\n              extensionIds: identifiers.extensionIds,\n              message: options.message,\n              version: options.version,\n              commitReference: options.commitReference,\n            })\n\n            if (!useThemebundling()) {\n              const themeExtensions = app.allExtensions.filter((ext) => ext.isThemeExtension)\n              await uploadThemeExtensions(themeExtensions, {apiKey, identifiers, token})\n            }\n\n            app = await updateAppIdentifiers({app, identifiers, command: 'deploy'})\n          },\n        },\n      ]\n\n      await renderTasks(tasks)\n\n      await outputCompletionMessage({\n        app,\n        release,\n        uploadExtensionsBundleResult,\n      })\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      /**\n       * If deployment fails when uploading we want the identifiers to be persisted\n       * for the next run.\n       */\n      await updateAppIdentifiers({app, identifiers, command: 'deploy'})\n      throw error\n    }\n  })\n}\n\nasync function outputCompletionMessage({\n  app,\n  release,\n  uploadExtensionsBundleResult,\n}: {\n  app: AppInterface\n  release: boolean\n  uploadExtensionsBundleResult: UploadExtensionsBundleOutput\n}) {\n  const linkAndMessage = [\n    {link: {label: uploadExtensionsBundleResult.versionTag, url: uploadExtensionsBundleResult.location}},\n    uploadExtensionsBundleResult.message ? `\\n${uploadExtensionsBundleResult.message}` : '',\n  ]\n  if (release) {\n    return uploadExtensionsBundleResult.deployError\n      ? renderInfo({\n          headline: 'New version created, but not released.',\n          body: [...linkAndMessage, `\\n\\n${uploadExtensionsBundleResult.deployError}`],\n        })\n      : renderSuccess({\n          headline: 'New version released to users.',\n          body: linkAndMessage,\n        })\n  }\n\n  return renderSuccess({\n    headline: 'New version created.',\n    body: linkAndMessage,\n    nextSteps: [\n      [\n        'Run',\n        {\n          command: formatPackageManagerCommand(\n            app.packageManager,\n            'shopify app release',\n            `--version=${uploadExtensionsBundleResult.versionTag}`,\n          ),\n        },\n        'to release this version to users.',\n      ],\n    ],\n  })\n}\n"]}