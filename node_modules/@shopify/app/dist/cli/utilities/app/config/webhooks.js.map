{"version":3,"file":"webhooks.js","sourceRoot":"","sources":["../../../../../src/cli/utilities/app/config/webhooks.ts"],"names":[],"mappings":"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","sourcesContent":["import {zod} from '@shopify/cli-kit/node/schema'\nimport type {WebhookConfig} from '../../../models/app/app.js'\n\nexport const httpsRegex = /^(https:\\/\\/)/\n\nconst duplicateSubscriptionsError = 'You canâ€™t have duplicate subscriptions with the exact same `topic` and `uri`'\n\nexport function filterFalsey(values: (string | boolean | undefined)[]) {\n  return values.filter(Boolean)\n}\n\nconst generateSubscriptionKey = (topic: string, uri: string) => `${topic}::${uri}`\n\nexport function validateTopLevelSubscriptions(schema: WebhookConfig) {\n  const hasEndpoint = Boolean(schema.uri)\n  const hasTopics = Boolean(schema.topics?.length)\n\n  if (hasEndpoint && !hasTopics && !schema.subscriptions?.length) {\n    return {\n      code: zod.ZodIssueCode.custom,\n      message: 'To use a top-level `uri`, you must also provide a `topics` array or `[[webhooks.subscriptions]]`',\n      fatal: true,\n    }\n  }\n\n  if (!hasEndpoint && hasTopics) {\n    return {\n      code: zod.ZodIssueCode.custom,\n      message: 'To use top-level topics, you must also provide a top-level `uri`',\n      fatal: true,\n      path: ['topics'],\n    }\n  }\n\n  // given the uri will be static, the only way to have duplicate top-level subscriptions is if there are multiple identical topics\n  if (hasTopics && schema.topics?.length !== new Set(schema.topics).size) {\n    return {\n      code: zod.ZodIssueCode.custom,\n      message: duplicateSubscriptionsError,\n      fatal: true,\n      path: ['topics'],\n    }\n  }\n}\n\nexport function validateInnerSubscriptions({uri, subscriptions = [], ...schema}: WebhookConfig) {\n  const uniqueSubscriptionEndpointSet = new Set()\n\n  // add validated unique top level subscriptions to set\n  if (uri && schema.topics?.length) {\n    for (const topic of schema.topics) {\n      uniqueSubscriptionEndpointSet.add(generateSubscriptionKey(topic, uri))\n    }\n  }\n\n  if (!subscriptions.length) return\n\n  for (const [i, subscription] of subscriptions.entries()) {\n    const path = ['subscriptions', i]\n\n    // If no top-level uris are provided, ensure each subscription has at least one uri\n    if (!uri && !subscription.uri) {\n      return {\n        code: zod.ZodIssueCode.custom,\n        message: 'You must include either a top-level uri or an uri per `[[webhooks.subscriptions]]`',\n        fatal: true,\n        path,\n      }\n    }\n\n    let finalEndpoint = subscription.uri\n\n    // if there is no uri override, use top level uri. we are sure there will be one from earlier validation\n    if (!finalEndpoint) {\n      finalEndpoint = uri\n    }\n\n    if (subscription.path && !httpsRegex.test(finalEndpoint!)) {\n      return {\n        code: zod.ZodIssueCode.custom,\n        message: 'You must use an https `uri` to use a relative path',\n        fatal: true,\n        path,\n      }\n    }\n\n    // concat the path to the uri if it exists to ensure uniqueness\n    if (subscription.path) {\n      finalEndpoint = `${finalEndpoint}${subscription.path}`\n    }\n\n    const key = generateSubscriptionKey(subscription.topic, finalEndpoint!)\n\n    if (uniqueSubscriptionEndpointSet.has(key)) {\n      return {\n        code: zod.ZodIssueCode.custom,\n        message: duplicateSubscriptionsError,\n        fatal: true,\n        path: [...path, subscription.topic],\n      }\n    }\n\n    uniqueSubscriptionEndpointSet.add(key)\n  }\n}\n"]}