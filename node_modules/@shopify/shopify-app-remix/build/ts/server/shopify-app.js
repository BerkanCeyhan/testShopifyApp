"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shopifyApp = void 0;
var tslib_1 = require("tslib");
require("@shopify/shopify-api/adapters/web-api");
var shopify_api_1 = require("@shopify/shopify-api");
var types_1 = require("./types");
var version_1 = require("./version");
var webhooks_1 = require("./authenticate/webhooks");
var authenticate_1 = require("./authenticate/admin/authenticate");
var authenticate_2 = require("./authenticate/webhooks/authenticate");
var override_logger_1 = require("./override-logger");
var helpers_1 = require("./authenticate/helpers");
var login_1 = require("./authenticate/login/login");
var admin_1 = require("./unauthenticated/admin");
var public_1 = require("./authenticate/public");
var storefront_1 = require("./unauthenticated/storefront");
var auth_code_flow_1 = require("./authenticate/admin/strategies/auth-code-flow");
/**
 * Creates an object your app will use to interact with Shopify.
 *
 * @param appConfig Configuration options for your Shopify app, such as the scopes your app needs.
 * @returns `ShopifyApp` An object constructed using your appConfig.  It has methods for interacting with Shopify.
 *
 * @example
 * <caption>The minimum viable configuration</caption>
 * ```ts
 * import { shopifyApp } from "@shopify/shopify-app-remix/server";
 *
 * const shopify = shopifyApp({
 *   apiKey: process.env.SHOPIFY_API_KEY!,
 *   apiSecretKey: process.env.SHOPIFY_API_SECRET!,
 *   scopes: process.env.SCOPES?.split(",")!,
 *   appUrl: process.env.SHOPIFY_APP_URL!,
 * });
 * export default shopify;
 * ```
 */
function shopifyApp(appConfig) {
    var api = deriveApi(appConfig);
    var config = deriveConfig(appConfig, api.config);
    var logger = (0, override_logger_1.overrideLogger)(api.logger);
    if (appConfig.webhooks) {
        api.webhooks.addHandlers(appConfig.webhooks);
    }
    var params = { api: api, config: config, logger: logger };
    var oauth = new auth_code_flow_1.AuthCodeFlowStrategy(params);
    var authStrategy = (0, authenticate_1.authStrategyFactory)(tslib_1.__assign(tslib_1.__assign({}, params), { strategy: oauth }));
    var shopify = {
        sessionStorage: config.sessionStorage,
        addDocumentResponseHeaders: (0, helpers_1.addDocumentResponseHeadersFactory)(params),
        registerWebhooks: (0, webhooks_1.registerWebhooksFactory)(params),
        authenticate: {
            admin: authStrategy,
            public: (0, public_1.authenticatePublicFactory)(params),
            webhook: (0, authenticate_2.authenticateWebhookFactory)(params),
        },
        unauthenticated: {
            admin: (0, admin_1.unauthenticatedAdminContextFactory)(params),
            storefront: (0, storefront_1.unauthenticatedStorefrontContextFactory)(params),
        },
    };
    if (isAppStoreApp(shopify, appConfig) ||
        isSingleMerchantApp(shopify, appConfig)) {
        shopify.login = (0, login_1.loginFactory)(params);
    }
    return shopify;
}
exports.shopifyApp = shopifyApp;
function isAppStoreApp(_shopify, config) {
    return config.distribution === types_1.AppDistribution.AppStore;
}
function isSingleMerchantApp(_shopify, config) {
    return config.distribution === types_1.AppDistribution.SingleMerchant;
}
function deriveApi(appConfig) {
    var _a, _b;
    var appUrl;
    try {
        appUrl = new URL(appConfig.appUrl);
    }
    catch (error) {
        throw new shopify_api_1.ShopifyError('Invalid appUrl provided. Please provide a valid URL.');
    }
    /* eslint-disable no-process-env */
    if (appUrl.hostname === 'localhost' && !appUrl.port && process.env.PORT) {
        appUrl.port = process.env.PORT;
    }
    /* eslint-enable no-process-env */
    appConfig.appUrl = appUrl.origin;
    var userAgentPrefix = "Shopify Remix Library v".concat(version_1.SHOPIFY_REMIX_LIBRARY_VERSION);
    if (appConfig.userAgentPrefix) {
        userAgentPrefix = "".concat(appConfig.userAgentPrefix, " | ").concat(userAgentPrefix);
    }
    return (0, shopify_api_1.shopifyApi)(tslib_1.__assign(tslib_1.__assign({}, appConfig), { hostName: appUrl.host, hostScheme: appUrl.protocol.replace(':', ''), userAgentPrefix: userAgentPrefix, isEmbeddedApp: (_a = appConfig.isEmbeddedApp) !== null && _a !== void 0 ? _a : true, apiVersion: (_b = appConfig.apiVersion) !== null && _b !== void 0 ? _b : shopify_api_1.LATEST_API_VERSION, isCustomStoreApp: appConfig.distribution === types_1.AppDistribution.ShopifyAdmin, future: {} }));
}
function deriveConfig(appConfig, apiConfig) {
    var _a, _b, _c, _d;
    if (!appConfig.sessionStorage) {
        throw new shopify_api_1.ShopifyError('Please provide a valid session storage. Refer to https://github.com/Shopify/shopify-app-js/blob/main/README.md#session-storage-options for options.');
    }
    var authPathPrefix = appConfig.authPathPrefix || '/auth';
    appConfig.distribution = (_a = appConfig.distribution) !== null && _a !== void 0 ? _a : types_1.AppDistribution.AppStore;
    return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, appConfig), apiConfig), { canUseLoginForm: appConfig.distribution !== types_1.AppDistribution.ShopifyAdmin, useOnlineTokens: (_b = appConfig.useOnlineTokens) !== null && _b !== void 0 ? _b : false, hooks: (_c = appConfig.hooks) !== null && _c !== void 0 ? _c : {}, sessionStorage: appConfig.sessionStorage, future: (_d = appConfig.future) !== null && _d !== void 0 ? _d : {}, auth: {
            path: authPathPrefix,
            callbackPath: "".concat(authPathPrefix, "/callback"),
            patchSessionTokenPath: "".concat(authPathPrefix, "/session-token"),
            exitIframePath: "".concat(authPathPrefix, "/exit-iframe"),
            loginPath: "".concat(authPathPrefix, "/login"),
        } });
}
//# sourceMappingURL=shopify-app.js.map