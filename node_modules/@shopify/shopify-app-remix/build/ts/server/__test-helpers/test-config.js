"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testConfig = void 0;
var tslib_1 = require("tslib");
var shopify_api_1 = require("@shopify/shopify-api");
var shopify_app_session_storage_memory_1 = require("@shopify/shopify-app-session-storage-memory");
var const_1 = require("./const");
/*
 * This object mandates that all existing future flags be activated for tests. If a new flag is added, this object must
 * be updated to include it, which will also cause all tests to use the new behaviour by default (and likely fail).
 *
 * This way, we'll always ensure our tests are covering all future flags. Please make sure to also have tests for the
 * old behaviour.
 */
var TEST_FUTURE_FLAGS = {
    v3_authenticatePublic: true,
    v3_webhookAdminContext: true,
};
var TEST_CONFIG = {
    apiKey: const_1.API_KEY,
    apiSecretKey: const_1.API_SECRET_KEY,
    scopes: ['testScope'],
    apiVersion: shopify_api_1.LATEST_API_VERSION,
    appUrl: const_1.APP_URL,
    logger: {
        log: jest.fn(),
        level: shopify_api_1.LogSeverity.Debug,
    },
    isEmbeddedApp: true,
    sessionStorage: new shopify_app_session_storage_memory_1.MemorySessionStorage(),
    future: TEST_FUTURE_FLAGS,
};
// Reset the config object before each test
beforeEach(function () {
    TEST_CONFIG.logger.log.mockReset();
    TEST_CONFIG.sessionStorage = new shopify_app_session_storage_memory_1.MemorySessionStorage();
});
function testConfig(_a) {
    if (_a === void 0) { _a = {}; }
    var future = _a.future, overrides = tslib_1.__rest(_a, ["future"]);
    return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, TEST_CONFIG), overrides), { logger: tslib_1.__assign(tslib_1.__assign({}, TEST_CONFIG.logger), overrides.logger), future: tslib_1.__assign(tslib_1.__assign({}, TEST_CONFIG.future), future) });
}
exports.testConfig = testConfig;
//# sourceMappingURL=test-config.js.map