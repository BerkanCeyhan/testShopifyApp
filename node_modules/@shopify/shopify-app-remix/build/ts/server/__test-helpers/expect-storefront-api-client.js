"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectStorefrontApiClient = void 0;
var tslib_1 = require("tslib");
var __1 = require("..");
var request_mock_1 = require("./request-mock");
var const_1 = require("./const");
function expectStorefrontApiClient(factory) {
    var _this = this;
    it('Storefront client can perform GraphQL Requests', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var _a, storefront, actualSession, apiResponse, response, _b;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, factory()];
                case 1:
                    _a = _c.sent(), storefront = _a.storefront, actualSession = _a.actualSession;
                    apiResponse = { blogs: { nodes: [{ id: 1 }] } };
                    return [4 /*yield*/, (0, request_mock_1.mockExternalRequest)({
                            request: new Request("https://".concat(const_1.TEST_SHOP, "/api/").concat(__1.LATEST_API_VERSION, "/graphql.json"), {
                                method: 'POST',
                                headers: {
                                    'Shopify-Storefront-Private-Token': actualSession.accessToken,
                                },
                            }),
                            response: new Response(JSON.stringify(apiResponse)),
                        })];
                case 2:
                    _c.sent();
                    return [4 /*yield*/, storefront.graphql('blogs(first: 1) { nodes { id }}')];
                case 3:
                    response = _c.sent();
                    // THEN
                    expect(response.status).toEqual(200);
                    _b = expect;
                    return [4 /*yield*/, response.json()];
                case 4:
                    _b.apply(void 0, [_c.sent()]).toEqual(apiResponse);
                    return [2 /*return*/];
            }
        });
    }); });
    it('Storefront client uses the correct session', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var _a, expectedSession, actualSession;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, factory()];
                case 1:
                    _a = _b.sent(), expectedSession = _a.expectedSession, actualSession = _a.actualSession;
                    // THEN
                    expect(expectedSession).toEqual(actualSession);
                    return [2 /*return*/];
            }
        });
    }); });
}
exports.expectStorefrontApiClient = expectStorefrontApiClient;
//# sourceMappingURL=expect-storefront-api-client.js.map