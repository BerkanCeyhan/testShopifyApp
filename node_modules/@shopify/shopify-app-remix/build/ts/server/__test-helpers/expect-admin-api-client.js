"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectAdminApiClient = void 0;
var tslib_1 = require("tslib");
var __1 = require("..");
var request_mock_1 = require("./request-mock");
var const_1 = require("./const");
var REQUEST_URL = "https://".concat(const_1.TEST_SHOP, "/admin/api/").concat(__1.LATEST_API_VERSION, "/customers.json");
function expectAdminApiClient(factory) {
    var _this = this;
    it('REST client can perform GET requests', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var admin, response, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, factory()];
                case 1:
                    admin = (_b.sent()).admin;
                    return [4 /*yield*/, (0, request_mock_1.mockExternalRequest)({
                            request: new Request(REQUEST_URL),
                            response: new Response(JSON.stringify({ customers: [] })),
                        })];
                case 2:
                    _b.sent();
                    return [4 /*yield*/, admin.rest.get({ path: 'customers' })];
                case 3:
                    response = _b.sent();
                    // THEN
                    expect(response.status).toEqual(200);
                    _a = expect;
                    return [4 /*yield*/, response.json()];
                case 4:
                    _a.apply(void 0, [_b.sent()]).toEqual({ customers: [] });
                    return [2 /*return*/];
            }
        });
    }); });
    it('REST client can perform POST requests', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var admin, response, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, factory()];
                case 1:
                    admin = (_b.sent()).admin;
                    return [4 /*yield*/, (0, request_mock_1.mockExternalRequest)({
                            request: new Request(REQUEST_URL, { method: 'POST' }),
                            response: new Response(JSON.stringify({ customers: [] })),
                        })];
                case 2:
                    _b.sent();
                    return [4 /*yield*/, admin.rest.post({
                            path: '/customers.json',
                            data: '',
                        })];
                case 3:
                    response = _b.sent();
                    // THEN
                    expect(response.status).toEqual(200);
                    _a = expect;
                    return [4 /*yield*/, response.json()];
                case 4:
                    _a.apply(void 0, [_b.sent()]).toEqual({ customers: [] });
                    return [2 /*return*/];
            }
        });
    }); });
    it('REST client can perform PUT requests', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var admin, response, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, factory()];
                case 1:
                    admin = (_b.sent()).admin;
                    return [4 /*yield*/, (0, request_mock_1.mockExternalRequest)({
                            request: new Request(REQUEST_URL, { method: 'PUT' }),
                            response: new Response(JSON.stringify({ customers: [] })),
                        })];
                case 2:
                    _b.sent();
                    return [4 /*yield*/, admin.rest.put({
                            path: '/customers.json',
                            data: '',
                        })];
                case 3:
                    response = _b.sent();
                    // THEN
                    expect(response.status).toEqual(200);
                    _a = expect;
                    return [4 /*yield*/, response.json()];
                case 4:
                    _a.apply(void 0, [_b.sent()]).toEqual({ customers: [] });
                    return [2 /*return*/];
            }
        });
    }); });
    it('REST client can perform DELETE requests', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var admin, response, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, factory()];
                case 1:
                    admin = (_b.sent()).admin;
                    return [4 /*yield*/, (0, request_mock_1.mockExternalRequest)({
                            request: new Request(REQUEST_URL, { method: 'DELETE' }),
                            response: new Response(JSON.stringify({ customers: [] })),
                        })];
                case 2:
                    _b.sent();
                    return [4 /*yield*/, admin.rest.delete({ path: '/customers.json' })];
                case 3:
                    response = _b.sent();
                    // THEN
                    expect(response.status).toEqual(200);
                    _a = expect;
                    return [4 /*yield*/, response.json()];
                case 4:
                    _a.apply(void 0, [_b.sent()]).toEqual({ customers: [] });
                    return [2 /*return*/];
            }
        });
    }); });
    it('GraphQL client can perform requests', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var _a, admin, actualSession, response, _b;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, factory()];
                case 1:
                    _a = _c.sent(), admin = _a.admin, actualSession = _a.actualSession;
                    return [4 /*yield*/, (0, request_mock_1.mockExternalRequest)({
                            request: new Request("https://".concat(const_1.TEST_SHOP, "/admin/api/").concat(__1.LATEST_API_VERSION, "/graphql.json"), {
                                method: 'POST',
                                headers: { 'X-Shopify-Access-Token': actualSession.accessToken },
                            }),
                            response: new Response(JSON.stringify({ shop: { name: 'Test shop' } })),
                        })];
                case 2:
                    _c.sent();
                    return [4 /*yield*/, admin.graphql('{ shop { name } }')];
                case 3:
                    response = _c.sent();
                    // THEN
                    expect(response.status).toEqual(200);
                    _b = expect;
                    return [4 /*yield*/, response.json()];
                case 4:
                    _b.apply(void 0, [_c.sent()]).toEqual({ shop: { name: 'Test shop' } });
                    return [2 /*return*/];
            }
        });
    }); });
    it('returns a session object as part of the context', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var _a, expectedSession, actualSession;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, factory()];
                case 1:
                    _a = _b.sent(), expectedSession = _a.expectedSession, actualSession = _a.actualSession;
                    // THEN
                    expect(expectedSession).toEqual(actualSession);
                    return [2 /*return*/];
            }
        });
    }); });
}
exports.expectAdminApiClient = expectAdminApiClient;
//# sourceMappingURL=expect-admin-api-client.js.map