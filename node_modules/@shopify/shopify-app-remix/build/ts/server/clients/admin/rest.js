"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.restClientFactory = void 0;
var tslib_1 = require("tslib");
function restClientFactory(_a) {
    var params = _a.params, handleClientError = _a.handleClientError, session = _a.session;
    var api = params.api;
    var client = new RemixRestClient({
        params: params,
        handleClientError: handleClientError,
        session: session,
    });
    if (api.rest) {
        client.resources = {};
        var RestResourceClient_1 = restResourceClientFactory({
            params: params,
            handleClientError: handleClientError,
            session: session,
        });
        Object.entries(api.rest).forEach(function (_a) {
            var _b = tslib_1.__read(_a, 2), name = _b[0], resource = _b[1];
            var RemixResource = /** @class */ (function (_super) {
                tslib_1.__extends(RemixResource, _super);
                function RemixResource() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                RemixResource.Client = RestResourceClient_1;
                return RemixResource;
            }(resource));
            Reflect.defineProperty(RemixResource, 'name', {
                value: name,
            });
            Reflect.set(client.resources, name, RemixResource);
        });
    }
    return client;
}
exports.restClientFactory = restClientFactory;
var RemixRestClient = /** @class */ (function () {
    function RemixRestClient(_a) {
        var params = _a.params, session = _a.session, handleClientError = _a.handleClientError;
        this.params = params;
        this.handleClientError = handleClientError;
        this.session = session;
    }
    /**
     * Performs a GET request on the given path.
     */
    RemixRestClient.prototype.get = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.makeRequest(tslib_1.__assign({ method: 'GET' }, params))];
            });
        });
    };
    /**
     * Performs a POST request on the given path.
     */
    RemixRestClient.prototype.post = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.makeRequest(tslib_1.__assign({ method: 'POST' }, params))];
            });
        });
    };
    /**
     * Performs a PUT request on the given path.
     */
    RemixRestClient.prototype.put = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.makeRequest(tslib_1.__assign({ method: 'PUT' }, params))];
            });
        });
    };
    /**
     * Performs a DELETE request on the given path.
     */
    RemixRestClient.prototype.delete = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.makeRequest(tslib_1.__assign({ method: 'DELETE' }, params))];
            });
        });
    };
    RemixRestClient.prototype.makeRequest = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var originalClient, originalRequest, apiResponse, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        originalClient = new this.params.api.clients.Rest({
                            session: this.session,
                        });
                        originalRequest = Reflect.get(originalClient, 'request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 7]);
                        return [4 /*yield*/, originalRequest.call(originalClient, params)];
                    case 2:
                        apiResponse = _a.sent();
                        // We use a separate client for REST requests and REST resources because we want to override the API library
                        // client class to return a Response object instead.
                        return [2 /*return*/, new Response(JSON.stringify(apiResponse.body), {
                                headers: apiResponse.headers,
                            })];
                    case 3:
                        error_1 = _a.sent();
                        if (!this.handleClientError) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.handleClientError({
                                error: error_1,
                                session: this.session,
                                params: this.params,
                            })];
                    case 4: throw _a.sent();
                    case 5: throw new Error(error_1);
                    case 6: return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return RemixRestClient;
}());
function restResourceClientFactory(_a) {
    var params = _a.params, handleClientError = _a.handleClientError, session = _a.session;
    var api = params.api;
    var ApiClient = api.clients.Rest;
    return /** @class */ (function (_super) {
        tslib_1.__extends(RestResourceClient, _super);
        function RestResourceClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RestResourceClient.prototype.request = function (requestParams) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var originalClient, originalRequest, error_2;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            originalClient = new api.clients.Rest({ session: session });
                            originalRequest = Reflect.get(originalClient, 'request');
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 7]);
                            return [4 /*yield*/, originalRequest.call(originalClient, requestParams)];
                        case 2: 
                        // We just call through to the API library client, and handle the error response here, so that data parsing
                        // behaves the same way.
                        return [2 /*return*/, _a.sent()];
                        case 3:
                            error_2 = _a.sent();
                            if (!handleClientError) return [3 /*break*/, 5];
                            return [4 /*yield*/, handleClientError({ error: error_2, params: params, session: session })];
                        case 4: throw _a.sent();
                        case 5: throw new Error(error_2);
                        case 6: return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        return RestResourceClient;
    }(ApiClient));
}
//# sourceMappingURL=rest.js.map