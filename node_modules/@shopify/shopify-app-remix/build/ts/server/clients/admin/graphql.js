"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.graphqlClientFactory = void 0;
var tslib_1 = require("tslib");
var runtime_1 = require("@shopify/shopify-api/runtime");
// eslint-disable-next-line no-warning-comments
// TODO: This is actually just a call through to the Shopify API client, but with a different API. We should eventually
// move this over to the library layer. While doing that, we should also allow the apiVersion to be passed into the REST
// client request calls.
function graphqlClientFactory(_a) {
    var params = _a.params, handleClientError = _a.handleClientError, session = _a.session;
    return function query(operation, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var client, apiResponse, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = new params.api.clients.Graphql({
                            session: session,
                            apiVersion: options === null || options === void 0 ? void 0 : options.apiVersion,
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 6]);
                        return [4 /*yield*/, client.query({
                                data: { query: operation, variables: options === null || options === void 0 ? void 0 : options.variables },
                                tries: options === null || options === void 0 ? void 0 : options.tries,
                                extraHeaders: options === null || options === void 0 ? void 0 : options.headers,
                            })];
                    case 2:
                        apiResponse = _a.sent();
                        return [2 /*return*/, new Response(JSON.stringify(apiResponse.body), {
                                headers: (0, runtime_1.flatHeaders)(apiResponse.headers),
                            })];
                    case 3:
                        error_1 = _a.sent();
                        if (!handleClientError) return [3 /*break*/, 5];
                        return [4 /*yield*/, handleClientError({ error: error_1, params: params, session: session })];
                    case 4: throw _a.sent();
                    case 5: throw error_1;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
}
exports.graphqlClientFactory = graphqlClientFactory;
//# sourceMappingURL=graphql.js.map