"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authenticateWebhookFactory = void 0;
var tslib_1 = require("tslib");
var shopify_api_1 = require("@shopify/shopify-api");
var clients_1 = require("../../clients");
var helpers_1 = require("../admin/helpers");
function authenticateWebhookFactory(params) {
    var api = params.api, config = params.config, logger = params.logger;
    return function authenticate(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rawBody, check, sessionId, session, webhookContext, admin, restClient_1, graphqlClient;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (request.method !== 'POST') {
                            logger.debug('Received a non-POST request for a webhook. Only POST requests are allowed.', { url: request.url, method: request.method });
                            throw new Response(undefined, {
                                status: 405,
                                statusText: 'Method not allowed',
                            });
                        }
                        return [4 /*yield*/, request.text()];
                    case 1:
                        rawBody = _a.sent();
                        return [4 /*yield*/, api.webhooks.validate({
                                rawBody: rawBody,
                                rawRequest: request,
                            })];
                    case 2:
                        check = _a.sent();
                        if (!check.valid) {
                            if (check.reason === shopify_api_1.WebhookValidationErrorReason.InvalidHmac) {
                                logger.debug('Webhook HMAC validation failed', check);
                                throw new Response(undefined, {
                                    status: 401,
                                    statusText: 'Unauthorized',
                                });
                            }
                            else {
                                logger.debug('Webhook validation failed', check);
                                throw new Response(undefined, { status: 400, statusText: 'Bad Request' });
                            }
                        }
                        sessionId = api.session.getOfflineId(check.domain);
                        return [4 /*yield*/, config.sessionStorage.loadSession(sessionId)];
                    case 3:
                        session = _a.sent();
                        webhookContext = {
                            apiVersion: check.apiVersion,
                            shop: check.domain,
                            topic: check.topic,
                            webhookId: check.webhookId,
                            payload: JSON.parse(rawBody),
                            session: undefined,
                            admin: undefined,
                        };
                        if (!session) {
                            return [2 /*return*/, webhookContext];
                        }
                        if (config.future.v3_webhookAdminContext) {
                            admin = (0, clients_1.adminClientFactory)({
                                params: params,
                                session: session,
                                handleClientError: (0, helpers_1.handleClientErrorFactory)({ request: request }),
                            });
                        }
                        else {
                            restClient_1 = new api.clients.Rest({
                                session: session,
                                apiVersion: check.apiVersion,
                            });
                            graphqlClient = new api.clients.Graphql({
                                session: session,
                                apiVersion: check.apiVersion,
                            });
                            Object.entries(api.rest).forEach(function (_a) {
                                var _b = tslib_1.__read(_a, 2), name = _b[0], resource = _b[1];
                                Reflect.set(restClient_1, name, resource);
                            });
                            admin = {
                                rest: restClient_1,
                                graphql: graphqlClient,
                            };
                        }
                        return [2 /*return*/, tslib_1.__assign(tslib_1.__assign({}, webhookContext), { session: session, admin: admin })];
                }
            });
        });
    };
}
exports.authenticateWebhookFactory = authenticateWebhookFactory;
//# sourceMappingURL=authenticate.js.map