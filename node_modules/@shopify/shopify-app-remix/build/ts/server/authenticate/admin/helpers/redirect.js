"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.redirectFactory = void 0;
var server_runtime_1 = require("@remix-run/server-runtime");
var get_session_token_header_1 = require("../../helpers/get-session-token-header");
var render_app_bridge_1 = require("./render-app-bridge");
var redirect_with_app_bridge_headers_1 = require("./redirect-with-app-bridge-headers");
function redirectFactory(params, request) {
    var config = params.config;
    return function redirect(url, init) {
        var searchParams = new URL(request.url).searchParams;
        var parsedUrl = new URL(url, config.appUrl);
        var isSameOrigin = parsedUrl.origin === config.appUrl;
        if (isSameOrigin || url.startsWith('/')) {
            searchParams.forEach(function (value, key) {
                if (!parsedUrl.searchParams.has(key)) {
                    parsedUrl.searchParams.set(key, value);
                }
            });
        }
        var target = (typeof init !== 'number' && (init === null || init === void 0 ? void 0 : init.target)) || '_self';
        if (target === '_self') {
            if (isBounceRequest(request)) {
                throw (0, render_app_bridge_1.renderAppBridge)(params, request, {
                    url: parsedUrl.toString(),
                    target: target,
                });
            }
            else {
                return (0, server_runtime_1.redirect)(parsedUrl.toString(), init);
            }
        }
        else if (isDataRequest(request)) {
            throw (0, redirect_with_app_bridge_headers_1.redirectWithAppBridgeHeaders)(parsedUrl.toString());
        }
        else if (isEmbeddedRequest(request)) {
            throw (0, render_app_bridge_1.renderAppBridge)(params, request, {
                url: parsedUrl.toString(),
                target: target,
            });
        }
        return (0, server_runtime_1.redirect)(url, init);
    };
}
exports.redirectFactory = redirectFactory;
function isBounceRequest(request) {
    return (Boolean((0, get_session_token_header_1.getSessionTokenHeader)(request)) &&
        request.headers.has('X-Shopify-Bounce'));
}
function isDataRequest(request) {
    var searchParams = new URL(request.url).searchParams;
    var isGet = request.method === 'GET';
    var sessionTokenHeader = Boolean((0, get_session_token_header_1.getSessionTokenHeader)(request));
    var sessionTokenSearchParam = searchParams.has('id_token');
    return (sessionTokenHeader &&
        !sessionTokenSearchParam &&
        !isBounceRequest(request) &&
        (!isEmbeddedRequest(request) || !isGet));
}
function isEmbeddedRequest(request) {
    var searchParams = new URL(request.url).searchParams;
    return searchParams.get('embedded') === '1';
}
//# sourceMappingURL=redirect.js.map