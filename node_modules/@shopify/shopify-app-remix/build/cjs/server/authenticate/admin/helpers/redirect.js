'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var serverRuntime = require('@remix-run/server-runtime');
var getSessionTokenHeader = require('../../helpers/get-session-token-header.js');
var renderAppBridge = require('./render-app-bridge.js');
var redirectWithAppBridgeHeaders = require('./redirect-with-app-bridge-headers.js');

function redirectFactory(params, request) {
  const {
    config
  } = params;
  return function redirect(url, init) {
    const {
      searchParams
    } = new URL(request.url);
    const parsedUrl = new URL(url, config.appUrl);
    const isSameOrigin = parsedUrl.origin === config.appUrl;
    if (isSameOrigin || url.startsWith('/')) {
      searchParams.forEach((value, key) => {
        if (!parsedUrl.searchParams.has(key)) {
          parsedUrl.searchParams.set(key, value);
        }
      });
    }
    const target = typeof init !== 'number' && (init === null || init === void 0 ? void 0 : init.target) || '_self';
    if (target === '_self') {
      if (isBounceRequest(request)) {
        throw renderAppBridge.renderAppBridge(params, request, {
          url: parsedUrl.toString(),
          target
        });
      } else {
        return serverRuntime.redirect(parsedUrl.toString(), init);
      }
    } else if (isDataRequest(request)) {
      throw redirectWithAppBridgeHeaders.redirectWithAppBridgeHeaders(parsedUrl.toString());
    } else if (isEmbeddedRequest(request)) {
      throw renderAppBridge.renderAppBridge(params, request, {
        url: parsedUrl.toString(),
        target
      });
    }
    return serverRuntime.redirect(url, init);
  };
}
function isBounceRequest(request) {
  return Boolean(getSessionTokenHeader.getSessionTokenHeader(request)) && request.headers.has('X-Shopify-Bounce');
}
function isDataRequest(request) {
  const {
    searchParams
  } = new URL(request.url);
  const isGet = request.method === 'GET';
  const sessionTokenHeader = Boolean(getSessionTokenHeader.getSessionTokenHeader(request));
  const sessionTokenSearchParam = searchParams.has('id_token');
  return sessionTokenHeader && !sessionTokenSearchParam && !isBounceRequest(request) && (!isEmbeddedRequest(request) || !isGet);
}
function isEmbeddedRequest(request) {
  const {
    searchParams
  } = new URL(request.url);
  return searchParams.get('embedded') === '1';
}

exports.redirectFactory = redirectFactory;
