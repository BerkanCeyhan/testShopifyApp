'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var factory = require('../../../clients/admin/factory.js');
var factory$1 = require('../../../clients/storefront/factory.js');

function authenticateAppProxyFactory(params) {
  const {
    api,
    config,
    logger
  } = params;
  return async function authenticate(request) {
    logger.info('Authenticating app proxy request');
    const {
      searchParams
    } = new URL(request.url);
    const query = Object.fromEntries(searchParams.entries());
    let isValid = false;
    try {
      isValid = await api.utils.validateHmac(query, {
        signator: 'appProxy'
      });
    } catch (error) {
      logger.info(error.message);
      throw new Response(undefined, {
        status: 400,
        statusText: 'Bad Request'
      });
    }
    if (!isValid) {
      logger.info('App proxy request has invalid signature');
      throw new Response(undefined, {
        status: 400,
        statusText: 'Bad Request'
      });
    }
    const shop = searchParams.get('shop');
    const sessionId = api.session.getOfflineId(shop);
    const session = await config.sessionStorage.loadSession(sessionId);
    if (!session) {
      const context = {
        liquid,
        session: undefined,
        admin: undefined,
        storefront: undefined
      };
      return context;
    }
    const context = {
      liquid,
      session,
      admin: factory.adminClientFactory({
        params,
        session
      }),
      storefront: factory$1.storefrontClientFactory({
        params,
        session
      })
    };
    return context;
  };
}
const liquid = (body, initAndOptions) => {
  if (typeof initAndOptions !== 'object') {
    return new Response(body, {
      status: initAndOptions || 200,
      headers: {
        'Content-Type': 'application/liquid'
      }
    });
  }
  const {
    layout,
    ...responseInit
  } = initAndOptions || {};
  const responseBody = layout === false ? `{% layout none %} ${body}` : body;
  const headers = new Headers(responseInit.headers);
  headers.set('Content-Type', 'application/liquid');
  return new Response(responseBody, {
    ...responseInit,
    headers
  });
};

exports.authenticateAppProxyFactory = authenticateAppProxyFactory;
