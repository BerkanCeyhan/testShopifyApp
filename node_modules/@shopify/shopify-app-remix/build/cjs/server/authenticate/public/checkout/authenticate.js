'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var ensureCorsHeaders = require('../../helpers/ensure-cors-headers.js');
var validateSessionToken = require('../../helpers/validate-session-token.js');
var getSessionTokenHeader = require('../../helpers/get-session-token-header.js');
var rejectBotRequest = require('../../helpers/reject-bot-request.js');
var respondToOptionsRequest = require('../../helpers/respond-to-options-request.js');

function authenticateCheckoutFactory(params) {
  return async function authenticateCheckout(request, options = {}) {
    var _options$corsHeaders;
    const {
      logger
    } = params;
    const corsHeaders = (_options$corsHeaders = options.corsHeaders) !== null && _options$corsHeaders !== void 0 ? _options$corsHeaders : [];
    rejectBotRequest.respondToBotRequest(params, request);
    respondToOptionsRequest.respondToOptionsRequest(params, request, corsHeaders);
    const sessionTokenHeader = getSessionTokenHeader.getSessionTokenHeader(request);
    logger.info('Authenticating checkout request');
    if (!sessionTokenHeader) {
      logger.debug('Request did not contain a session token');
      throw new Response(undefined, {
        status: 401,
        statusText: 'Unauthorized'
      });
    }
    return {
      sessionToken: await validateSessionToken.validateSessionToken(params, sessionTokenHeader, {
        checkAudience: false
      }),
      cors: ensureCorsHeaders.ensureCORSHeadersFactory(params, request, corsHeaders)
    };
  };
}

exports.authenticateCheckoutFactory = authenticateCheckoutFactory;
