'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('@shopify/shopify-api/adapters/web-api');
var shopifyApi = require('@shopify/shopify-api');
var types = require('./types.js');
var version = require('./version.js');
var register = require('./authenticate/webhooks/register.js');
var authenticate = require('./authenticate/admin/authenticate.js');
var authenticate$1 = require('./authenticate/webhooks/authenticate.js');
var overrideLogger = require('./override-logger.js');
var addResponseHeaders = require('./authenticate/helpers/add-response-headers.js');
require('isbot');
var login = require('./authenticate/login/login.js');
var factory$1 = require('./unauthenticated/admin/factory.js');
var factory = require('./authenticate/public/factory.js');
var factory$2 = require('./unauthenticated/storefront/factory.js');
var authCodeFlow = require('./authenticate/admin/strategies/auth-code-flow.js');

/**
 * Creates an object your app will use to interact with Shopify.
 *
 * @param appConfig Configuration options for your Shopify app, such as the scopes your app needs.
 * @returns `ShopifyApp` An object constructed using your appConfig.  It has methods for interacting with Shopify.
 *
 * @example
 * <caption>The minimum viable configuration</caption>
 * ```ts
 * import { shopifyApp } from "@shopify/shopify-app-remix/server";
 *
 * const shopify = shopifyApp({
 *   apiKey: process.env.SHOPIFY_API_KEY!,
 *   apiSecretKey: process.env.SHOPIFY_API_SECRET!,
 *   scopes: process.env.SCOPES?.split(",")!,
 *   appUrl: process.env.SHOPIFY_APP_URL!,
 * });
 * export default shopify;
 * ```
 */
function shopifyApp(appConfig) {
  const api = deriveApi(appConfig);
  const config = deriveConfig(appConfig, api.config);
  const logger = overrideLogger.overrideLogger(api.logger);
  if (appConfig.webhooks) {
    api.webhooks.addHandlers(appConfig.webhooks);
  }
  const params = {
    api,
    config,
    logger
  };
  const oauth = new authCodeFlow.AuthCodeFlowStrategy(params);
  const authStrategy = authenticate.authStrategyFactory({
    ...params,
    strategy: oauth
  });
  const shopify = {
    sessionStorage: config.sessionStorage,
    addDocumentResponseHeaders: addResponseHeaders.addDocumentResponseHeadersFactory(params),
    registerWebhooks: register.registerWebhooksFactory(params),
    authenticate: {
      admin: authStrategy,
      public: factory.authenticatePublicFactory(params),
      webhook: authenticate$1.authenticateWebhookFactory(params)
    },
    unauthenticated: {
      admin: factory$1.unauthenticatedAdminContextFactory(params),
      storefront: factory$2.unauthenticatedStorefrontContextFactory(params)
    }
  };
  if (isAppStoreApp(shopify, appConfig) || isSingleMerchantApp(shopify, appConfig)) {
    shopify.login = login.loginFactory(params);
  }
  return shopify;
}
function isAppStoreApp(_shopify, config) {
  return config.distribution === types.AppDistribution.AppStore;
}
function isSingleMerchantApp(_shopify, config) {
  return config.distribution === types.AppDistribution.SingleMerchant;
}
function deriveApi(appConfig) {
  var _appConfig$isEmbedded, _appConfig$apiVersion;
  let appUrl;
  try {
    appUrl = new URL(appConfig.appUrl);
  } catch (error) {
    throw new shopifyApi.ShopifyError('Invalid appUrl provided. Please provide a valid URL.');
  }

  /* eslint-disable no-process-env */
  if (appUrl.hostname === 'localhost' && !appUrl.port && process.env.PORT) {
    appUrl.port = process.env.PORT;
  }
  /* eslint-enable no-process-env */
  appConfig.appUrl = appUrl.origin;
  let userAgentPrefix = `Shopify Remix Library v${version.SHOPIFY_REMIX_LIBRARY_VERSION}`;
  if (appConfig.userAgentPrefix) {
    userAgentPrefix = `${appConfig.userAgentPrefix} | ${userAgentPrefix}`;
  }
  return shopifyApi.shopifyApi({
    ...appConfig,
    hostName: appUrl.host,
    hostScheme: appUrl.protocol.replace(':', ''),
    userAgentPrefix,
    isEmbeddedApp: (_appConfig$isEmbedded = appConfig.isEmbeddedApp) !== null && _appConfig$isEmbedded !== void 0 ? _appConfig$isEmbedded : true,
    apiVersion: (_appConfig$apiVersion = appConfig.apiVersion) !== null && _appConfig$apiVersion !== void 0 ? _appConfig$apiVersion : shopifyApi.LATEST_API_VERSION,
    isCustomStoreApp: appConfig.distribution === types.AppDistribution.ShopifyAdmin,
    future: {}
  });
}
function deriveConfig(appConfig, apiConfig) {
  var _appConfig$distributi, _appConfig$useOnlineT, _appConfig$hooks, _appConfig$future;
  if (!appConfig.sessionStorage) {
    throw new shopifyApi.ShopifyError('Please provide a valid session storage. Refer to https://github.com/Shopify/shopify-app-js/blob/main/README.md#session-storage-options for options.');
  }
  const authPathPrefix = appConfig.authPathPrefix || '/auth';
  appConfig.distribution = (_appConfig$distributi = appConfig.distribution) !== null && _appConfig$distributi !== void 0 ? _appConfig$distributi : types.AppDistribution.AppStore;
  return {
    ...appConfig,
    ...apiConfig,
    canUseLoginForm: appConfig.distribution !== types.AppDistribution.ShopifyAdmin,
    useOnlineTokens: (_appConfig$useOnlineT = appConfig.useOnlineTokens) !== null && _appConfig$useOnlineT !== void 0 ? _appConfig$useOnlineT : false,
    hooks: (_appConfig$hooks = appConfig.hooks) !== null && _appConfig$hooks !== void 0 ? _appConfig$hooks : {},
    sessionStorage: appConfig.sessionStorage,
    future: (_appConfig$future = appConfig.future) !== null && _appConfig$future !== void 0 ? _appConfig$future : {},
    auth: {
      path: authPathPrefix,
      callbackPath: `${authPathPrefix}/callback`,
      patchSessionTokenPath: `${authPathPrefix}/session-token`,
      exitIframePath: `${authPathPrefix}/exit-iframe`,
      loginPath: `${authPathPrefix}/login`
    }
  };
}

exports.shopifyApp = shopifyApp;
